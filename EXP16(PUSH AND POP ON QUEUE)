//Write a program to implement push and pop operation on a queue using a linked list.
#include <iostream>
using namespace std;

// Node structure for linked list
struct Node {
    int data;
    Node* next;
};

// Queue class
class Queue {
private:
    Node* front; // Pointer to the front of the queue
    Node* rear;  // Pointer to the rear of the queue

public:
    Queue() : front(NULL), rear(NULL) {} // Constructor to initialize the queue

    // Enqueue operation (push)
    void enqueue(int value) {
        Node* newNode = new Node();
        newNode->data = value;
        newNode->next = NULL; // Set the next of the new node to NULL

        if (rear == NULL) {
            // If the queue is empty, both front and rear point to the new node
            front = rear = newNode;
        } else {
            // Add the new node at the end and update the rear pointer
            rear->next = newNode;
            rear = newNode;
        }
        cout << value << " enqueued to the queue.\n";
    }

    // Dequeue operation (pop)
    void dequeue() {
        if (front == NULL) {
            cout << "Queue is empty, cannot dequeue.\n";
            return;
        }

        Node* temp = front;
        front = front->next; // Move front pointer to the next node

        // If the front becomes NULL, set rear to NULL as well
        if (front == NULL) {
            rear = NULL;
        }

        cout << temp->data << " dequeued from the queue.\n";
        delete temp; // Free the memory
    }

    // Function to display the front element of the queue
    void peek() {
        if (front == NULL) {
            cout << "Queue is empty.\n";
        } else {
            cout << "Front element is: " << front->data << "\n";
        }
    }

    // Function to check if the queue is empty
    bool isEmpty() {
        return front == NULL;
    }

    // Function to display all elements in the queue
    void display() {
        if (front == NULL) {
            cout << "Queue is empty.\n";
            return;
        }
        Node* temp = front;
        cout << "Queue elements: ";
        while (temp != NULL) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL\n";
    }
};

int main() {
    Queue queue; // Create a queue object
    int choice, value;

    do {
        cout << "\nMenu:\n";
        cout << "1. Enqueue\n";
        cout << "2. Dequeue\n";
        cout << "3. Peek\n";
        cout << "4. Display Queue\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to enqueue: ";
                cin >> value;
                queue.enqueue(value);
                break;
            case 2:
                queue.dequeue();
                break;
            case 3:
                queue.peek();
                break;
            case 4:
                queue.display();
                break;
            case 5:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice! Please try again.\n";
        }
    } while (choice != 5);

    return 0;
}
