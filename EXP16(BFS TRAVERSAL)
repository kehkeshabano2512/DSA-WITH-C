#include <iostream>
#include <queue>
using namespace std;

int graph[5][5];     // Adjacency matrix for 5 nodes
bool visited[5];     // Visited array

void bfs(int start) {
    queue<int> q;
    q.push(start);          // Start from the given node
    visited[start] = true;  // Mark it as visited

    while (!q.empty()) {
        int node = q.front();
        q.pop();
        cout << node << " ";  // Print the node

        // Visit all neighbors of the current node
        for (int i = 0; i < 5; i++) {
            if (graph[node][i] == 1 && !visited[i]) {
                q.push(i);
                visited[i] = true;
            }
        }
    }
}

int main() {
    // Create a graph with 5 nodes (0 to 4)
    // Add edges (undirected)
    graph[0][1] = graph[1][0] = 1;
    graph[0][2] = graph[2][0] = 1;
    graph[1][3] = graph[3][1] = 1;
    graph[2][4] = graph[4][2] = 1;

    // Mark all nodes as not visited
    for (int i = 0; i < 5; i++)
        visited[i] = false;

    cout << "BFS Traversal starting from node 0: ";
    bfs(0);  // Call BFS starting from node 0

    return 0;
}
