//Write a program to implement push and pop operation on a stack using a linked list.
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

class Stack {
private:
    Node* top;

public:
    Stack() : top(NULL) {} // Constructor to initialize the stack

    // Push operation
    void push(int value) {
        Node* newNode = new Node();
        newNode->data = value;
        newNode->next = top;
        top = newNode; // Move top to the new node
        cout << value << " pushed onto the stack.\n";
    }

    // Pop operation
    void pop() {
        if (top == NULL) {
            cout << "Stack is empty, cannot pop.\n";
            return;
        }
        Node* temp = top;
        top = top->next; // Move top to the next node
        cout << temp->data << " popped from the stack.\n";
        delete temp; // Free the memory
    }

    // Display the top element of the stack
    void peek() {
        if (top == NULL) {
            cout << "Stack is empty.\n";
        } else {
            cout << "Top element is: " << top->data << "\n";
        }
    }

    // Function to check if the stack is empty
    bool isEmpty() {
        return top == NULL;
    }

    // Function to display the entire stack
    void display() {
        if (top == NULL) {
            cout << "Stack is empty.\n";
            return;
        }
        Node* temp = top;
        cout << "Stack elements: ";
        while (temp != NULL) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL\n";
    }
};

int main() {
    Stack stack; // Create a stack object
    int choice, value;

    do {
        cout << "\nMenu:\n";
        cout << "1. Push\n";
        cout << "2. Pop\n";
        cout << "3. Peek\n";
        cout << "4. Display Stack\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to push: ";
                cin >> value;
                stack.push(value);
                break;
            case 2:
                stack.pop();
                break;
            case 3:
                stack.peek();
                break;
            case 4:
                stack.display();
                break;
            case 5:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice! Please try again.\n";
        }
    } while (choice != 5);

    return 0;
}
